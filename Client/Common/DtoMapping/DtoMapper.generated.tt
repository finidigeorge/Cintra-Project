<#@ template debug="true" language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs"#>

<#
var path = this.Host.ResolveAssemblyReference("$(TargetPath)");
Assembly assembly = Assembly.LoadFrom(path);
Type[] types = assembly.GetTypes();
#>

using System;
using System.ComponentModel;
using Shared;
using Shared.Dto;
using Common.Annotations;
using System.Runtime.CompilerServices;
using System.Text;
using System.Collections.Generic;

namespace Common.DtoMapping
{

<#
foreach (Type type in types)
{
    if (type.IsClass && type.Namespace == "Common.DtoMapping" && type.GetInterfaces().Any(x => x.Name =="INotifyPropertyChanged"))
    {        
		string baseTypeName = type.BaseType.Name;
		var baseProperties = type.BaseType.GetProperties(); 
        string className = type.Name;
        string interfaceName = "IAtomicEditableObject, ICustomDataErrorInfo";
#>		
		public partial class <#= className #> : <#= interfaceName #>
		{
			private readonly EditableAdapter<<#= baseTypeName #>> _adapter;
			public event ItemEndEditEventHandler ItemEndEdit;
			public event ItemEndCancelEventHandler ItemCancelEdit;

			public bool IsValid => String.IsNullOrEmpty(Error);

			<# foreach (var p in baseProperties) 
			{
				var propertyTypeName = p.PropertyType.Name;
				if (Nullable.GetUnderlyingType(p.PropertyType) != null)
				{
					propertyTypeName = Nullable.GetUnderlyingType(p.PropertyType).Name;
			#>		
			public override <#= propertyTypeName #>? <#= p.Name #> { get; set; }
			<#
				} else if (!p.PropertyType.IsGenericType) {
			#>	
			public override <#= propertyTypeName #> <#= p.Name #> { get; set; }
			<#
				}
			}
			#>

			public bool IsEditing { get; set; } = false;
			public string this[string propertyName] => _adapter.HandleMetadataValiadations(propertyName);

			public <#= className #>()
			{
				_adapter = new EditableAdapter<<#= baseTypeName #>>(this);
			}

			public void BeginEdit()
			{
				if(!IsEditing) 
				{
					IsEditing = true;
					_adapter.BeginEdit();
				}
			}

			public void EndEdit()
			{
				_adapter.EndEdit();	
				if (ItemEndEdit != null && IsEditing)
				{
					IsEditing = false;
					ItemEndEdit(this);
				}
			}

			public void CancelEdit()
			{
				IsEditing = false;
				_adapter.CancelEdit();
				if (ItemCancelEdit != null)
			        ItemCancelEdit(this);
			}	
			
			[NotifyPropertyChangedInvocator]
			public virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
			{
				PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
				PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Error)));
				PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsValid)));
			}
			
			public string Error
			{
				get
				{
					StringBuilder error = new StringBuilder();

					// iterate over all of the properties
					// of this object - aggregating any validation errors
					PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
					foreach (PropertyDescriptor prop in props)
					{
						string propertyError = this[prop.Name];
						if (!string.IsNullOrEmpty(propertyError))
						{
							error.Append((error.Length!=0  ? ", " : "") + propertyError);
						}
					}

					// apply object level validation rules
					var objectError = ApplyObjectLevelValidations();
					if (!string.IsNullOrEmpty(objectError))
						error.Append((error.Length != 0 ? ", " : "") + objectError);
					
					return error.ToString();
				}
			}
									
		}

<#
    }
}
#>

}